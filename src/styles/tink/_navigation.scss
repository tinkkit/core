/**
 * Navigation
 * --------------------------------------------------
 * - navigation behaviour states
 * - top navigation
 * - side navigation:
 *   - left navigation
 *   - right navigation
 * - bar
 * - back-to top
 */




/**
 * Breakpoints to import into JavaScript
 */

body:before {
  content: "phone-view";
  display: none; /* Prevent from displaying. */
}

@include mq($screen-sm) {
  body:before {
    content: "tablet-view";
  }
}

@include mq($screen-md) {
  body:before {
    content: "desktop-view";
  }
}

@include mq($screen-lg) {
  body:before {
    content: "widescreen-view";
  }
}




/**
 * HTML behaviour when side navigation is open
 */

html.nav-left-open,
html.nav-right-open {

  @include mq($screen-xs-max, "max") {
    body {
      overflow-x: hidden;
    }
  }
}

html.nav-left-open {

  @include mq($screen-xs-max, "max") {
    .main {
      transform: translate(rem($nav-aside-width), 0);
    }
    .nav-left {
      transform: translate(0, 0);
    }
  }
}

html.nav-right-open {

  @include mq($screen-xs-max, "max") {
    .main {
      transform: translate(rem(-$nav-aside-width), 0);
    }
    .nav-right {
      transform: translate(0, 0);
    }
  }
}




/**
 * Default behaviour is that there is a fixed nav-top,
 * so we need to 'fix' the body's padding
 */

html {
  &.has-nav-left {
    .main {
      @include mq($screen-sm) {
        padding-left: rem($nav-aside-width + $nav-aside-extra-body-padding);
      }
    }

    /**
     * If the left nav can always be closed we need some more styling
     */
    &.nav-left-can-always-close {

      // Nav left is NOT open
      @include mq($screen-sm) {
        .main {
          padding-left: 0;
        }
        .nav-left {
          transform: translate(rem(-$nav-aside-width), 0);
        }
      }

      // Nav left is open
      &.nav-left-open {
        @include mq($screen-sm) {
          .main {
            padding-left: rem($nav-aside-width + $nav-aside-extra-body-padding);
          }
          .nav-left {
            transform: translate(0, 0);
          }
        }
      }

      // Make sure the toggle is always visible
      .nav-top {
        &-toggle {
          @include mq($screen-sm) {
            display: inline-block;
          }
        }
      }
    }

    /**
     * The left nav can always be closed and starts open on desktop
     */
    &.nav-left-can-always-close-and-starts-open {

      // Nav left is NOT open
      @include mq($screen-sm) {
        .main {
          padding-left: rem($nav-aside-width + $nav-aside-extra-body-padding);
        }
        .nav-left {
          transform: translate(0, 0);
        }
      }

      // Nav left is open
      &.nav-left-open {
        @include mq($screen-sm) {
          .main {
            padding-left: 0;
          }
          .nav-left {
            transform: translate(rem(-$nav-aside-width), 0);
          }
        }
      }

      // Make sure the toggle is always visible
      .nav-top {
        &-toggle {
          @include mq($screen-sm) {
            display: inline-block;
          }
        }
      }
    }
  }

  &.has-nav-right {
    .main {
      @include mq($screen-sm) {
        padding-right: rem($nav-aside-width + $nav-aside-extra-body-padding);
      }
    }

    /**
     * If the right nav can always be closed we need some more styling
     */
    &.nav-right-can-always-close {

      // Nav right is NOT open
      @include mq($screen-sm) {
        .main {
          padding-right: 0;
        }
        .nav-right {
          transform: translate(rem($nav-aside-width), 0);
        }
      }

      // Nav right is open
      &.nav-right-open {
        @include mq($screen-sm) {
          .main {
            padding-right: rem($nav-aside-width + $nav-aside-extra-body-padding);
          }
          .nav-right {
            transform: translate(0, 0);
          }
        }
      }

      // Make sure the toggle is always visible
      .nav-top {
        &-toggle {
          @include mq($screen-sm) {
            display: inline-block;
          }
        }
      }
    }

    /**
     * The right nav can always be closed and starts open on desktop
     */
    &.nav-right-can-always-close-and-starts-open {

      // Nav right is NOT open
      @include mq($screen-sm) {
        .main {
          padding-right: rem($nav-aside-width + $nav-aside-extra-body-padding);
        }
        .nav-right {
          transform: translate(0, 0);
        }
      }

      // Nav right is open
      &.nav-right-open {
        @include mq($screen-sm) {
          .main {
            padding-right: 0;
          }
          .nav-right {
            transform: translate(rem($nav-aside-width), 0);
          }
        }
      }

      // Make sure the toggle is always visible
      .nav-top {
        &-toggle {
          @include mq($screen-sm) {
            display: inline-block;
          }
        }
      }
    }
  }

  /**
   * If the nav-top for some reason needs to scroll with the page
   */
  &.has-relative-nav-top {
    .nav-top {
      position: relative;
    }
  }
}


.main {
  // Properties that will make page transition animations really smooth
  position: absolute;
  transition: opacity ($animation-speed * 2) linear, padding $animation-speed linear, transform $animation-speed linear;
  width: 100%;

  /**
   * ng-animate classes
   */
  &.ng-enter {
    opacity: 0;
  }
  &.ng-leave {
    opacity: 1;
  }
  &.ng-enter.ng-enter-active {
    opacity: 1;
  }
  &.ng-leave.ng-leave-active {
    opacity: 0;
  }
}




/**
 * Top navigation
 * --------------------------------------------------
 */
.nav-top {
  @extend .bar;
  background-color: $nav-top-bg-color;
  color: $nav-top-color;
  left: 0;
  position: fixed;
  top: 0;
  z-index: layer('nav-top');

  a.btn,
  button,
  input {
    border: none;
    font-weight: normal;
  }

  &-left {
    @extend .bar-left;
  }

  &-center {
    @extend .bar-center;
  }

  &-right {
    @extend .bar-right;
    margin-right: 0;
  }

  // Not so easy to override
  > ul {
    > li {
      &.nav-top-toggle{
        @include mq($screen-sm) {
          display: none;
        }
      }
      &.nav-top-app {
        @include mq($screen-xs-max, "max") {
          display: none;
        }
      }
    }
  }

  &-logo {
    overflow: hidden; // correction for webkit 1px render bug

    a {
      background: $logo-bg-color image-url($logo) no-repeat center center;
      background-size: cover;
      display: inline-block;
      height: rem($logo-height);
      margin: rem(0 $nav-top-logo-padding 0 0);
      // padding: 0; // isn't really necessary
      vertical-align: middle;
      width: rem($logo-width);

      span {
        @extend .sr-only;
      }
    }
  }

  &-toggle {
    cursor: pointer;
    margin-right: rem($nav-top-padding / 2);

    a {
      color: $nav-top-link-color;
      text-decoration: none;
      &:hover,
      &:active,
      &:focus {
        color: $nav-top-link-hover-color;
      }
    }
  }

  &-app {
    a {
      color: $nav-top-link-color;
      margin: rem(0 $nav-top-padding 0 0);
      text-decoration: none;

      &:hover,
      &:active,
      &:focus {
        color: $nav-top-link-hover-color;
      }
    }

    h1 {
      font-size: rem($font-size-base);
      font-weight: 700;
      line-height: rem($nav-top-height);
      margin: 0;

      span {
        font-weight: 400;
      }
    }
  }
}




/**
 * Side navigation (styling for both left and right navigation)
 * --------------------------------------------------
 */

.nav-aside {
  background: $nav-aside-bg-color;
  bottom: 0;
  position: fixed;
  top: rem($nav-top-height);
  transition: transform $animation-speed linear;
  width: rem($nav-aside-width);
  z-index: layer('nav-aside');

  /**
   * Styling for semi-transparent line
   */
  &:before {
    background: rgba(0, 0, 0, .12);
    bottom: 0;
    content: '';
    height: 100%;
    pointer-events: none;
    position: absolute;
    top: 0;
    width: 2px;
    z-index: layer("pseudo");
  }

  /**
   * For semantics & correct scrolling behaviour
   */
  > aside {
    height: 100%;
    overflow: auto;
    -webkit-overflow-scrolling: touch;
    -webkit-overflow-scrolling: -blackberry-touch;
  }

  ul {
    @extend .list-unstyled;
  }

  &-title {
    color: $nav-aside-title-color;
    font-size: 90%;
    font-weight: 600;
    margin-top: rem($nav-aside-vertical-padding / 2);
    padding: rem(0 $nav-aside-horizontal-padding);
    text-transform: uppercase;

    &:first-letter {
      font-size: 110%;
    }

    + ul {
      margin-top: rem(-$nav-aside-vertical-padding);
    }
  }

  &-section {
    padding: rem($nav-aside-vertical-padding 0);
    position: relative;

    /**
     * section bottom border
     */
    &:not(:last-child) {
      &:after {
        background: $nav-aside-section-border-color;
        bottom: 0;
        content: '';
        height: 1px;
        left: rem($nav-aside-horizontal-padding);
        position: absolute;
        right: rem($nav-aside-horizontal-padding);
      }
    }

    /**
     * Menu: all levels
     */
    li {
      a {
        color: $nav-aside-link-color;
        display: table;
        padding: rem($nav-aside-vertical-padding $nav-aside-horizontal-padding);
        text-decoration: none;
        width: 100%;

        &:hover,
        &:active,
        &:focus {
          background-color: $nav-aside-link-hover-background-color;
          color: $nav-aside-link-hover-color;

          .badge {
            @include badge-variant($nav-aside-badge-hover-color, $nav-aside-badge-hover-background-color);
          }
          // .badge-info {
          //   @include badge-variant($badge-info-bg, $nav-aside-badge-hover-background-color);
          // }
          // .badge-primary {
          //   @include badge-variant($badge-primary-bg, $nav-aside-badge-hover-background-color);
          // }
          // .badge-success {
          //   @include badge-variant($badge-success-bg, $nav-aside-badge-hover-background-color);
          // }
          // .badge-warning {
          //   @include badge-variant($badge-warning-bg, $nav-aside-badge-hover-background-color);
          // }
          // .badge-danger {
          //   @include badge-variant($badge-danger-bg, $nav-aside-badge-hover-background-color);
          // }
        }

        &:focus {
          box-shadow: none;
        }

        > *, {
          display: table-cell;
          vertical-align: middle;
        }

        > i {
          padding: rem(3 10 0 0);
          vertical-align: top;
        }
      }

      &.active {
        a {
          color: $nav-aside-link-active-color;
          font-weight: 700;

          + ul {
            a {
              color: $nav-aside-link-color;
              font-weight: normal;

              &:hover,
              &:active,
              &:focus {
                background-color: $nav-aside-link-hover-background-color;
                color: $nav-aside-link-hover-color;
              }
            }
          }
        }
      }
    }

    /**
     * Menu first level
     */
    > ul {
      > li {
        border-bottom: 1px solid transparent;
        height: auto;
        overflow: hidden;
        position: relative;

        &.can-open {
          &:before {
            content: "\f0d7";
            font-family: FontAwesome;
            font-style: normal;
            font-weight: normal;
            pointer-events: none;
            position: absolute;
            right: rem($nav-aside-horizontal-padding);
            text-decoration: inherit;
            top: rem($nav-aside-vertical-padding);
            transition: color $animation-speed linear, transform $animation-speed linear;
            z-index: layer('pseudo');
          }

          &.open {
            border-bottom: 1px solid $nav-aside-bg-color;
            background: $nav-aside-item-open-color;

            &:before {
              transform: rotate(180deg);
            }

            > a {
              font-weight: 700;
            }
          }

          > a {
            padding-right: rem(30);
          }
        }

        &.has-active-item {
          > a {
            font-weight: 700;
          }
        }
      }


      /**
       * Menu second level
       */

      ul {
        display: none;

        li {
          a {
            padding: rem($nav-aside-item-vertical-padding $nav-aside-horizontal-padding $nav-aside-item-vertical-padding (2 * $nav-aside-horizontal-padding));
          }

          &.active {
            a {
              &:hover,
              &:active,
              &:focus {
                .badge {
                  background: $nav-aside-badge-active-background-hover-color;
                  color: $nav-aside-badge-active-hover-color;
                }
              }
            }

            .badge {
              background: $nav-aside-badge-active-background-color;
              color: $nav-aside-badge-active-color;
            }
          }
        }
      }
    }
  }

  .badge {
    background-color: $nav-aside-badge-background-color;
    color: $nav-aside-badge-color;
  }

  .badge,
  .badge-danger,
  .badge-info,
  .badge-primary,
  .badge-success,
  .badge-warning {
    float: right;
    margin-top: rem(3);
    transition: background $animation-speed linear, color $animation-speed linear;
  }

}




/**
 * Left navigation
 * (add-on for .nav-aside)
 */

.nav-left {
  left: 0;
  transform: translate(rem(-$nav-aside-width), 0);

  @include mq($screen-sm) {
    transform: translate(0, 0);
  }

  &:before {
    right: 0;
  }
}




/**
 * Right navigation
 * (add-on for .nav-aside)
 */

.nav-right {
  right: 0;
  transform: translate(rem($nav-aside-width), 0);

  @include mq($screen-sm) {
    transform: translate(0, 0);
  }

  &:before {
    left: 0;
  }
}




/**
 * Bar -- See separate _bar.scss file
 */
// .bar {
//   @include bar($nav-top-height, transparent, $bar-color);
// }




/**
 * Back to top
 */
.back-to-top {
  background-color: $back-to-top-bgcolor;
  border: none;
  // bottom: rem(16);
  bottom: rem(-44); // 16 - 60
  color: $back-to-top-color;
  line-height: 0;
  opacity: 0;
  padding: rem(15 12 17);
  position: fixed;
  right: rem(16);
  // See third issue here why we don't use transform anymore: http://caniuse.com/#feat=transforms2d
  // transform: translate(0, rem(60));
  transition: background $animation-speed linear, opacity $animation-speed linear, bottom $animation-speed linear;
  z-index: layer("above-pseudo");

  &:after {
    color: $white;
    content: '\f077';
    font-family: 'FontAwesome';
    font-weight: normal;
  }

  &:hover,
  &:active,
  &:focus  {
    background-color: $back-to-top-hover-bgcolor;
    color: $back-to-top-hover-color;
  }

  &.is-visible {
    bottom: rem(16);
    opacity: 1;
    // transform: translate(0, 0);
  }

  span {
    @extend .sr-only;
  }
}
